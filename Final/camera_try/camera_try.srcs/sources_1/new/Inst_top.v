//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 13 2022 14:12:17
//
//      Input file      : 
//      Component name  : top_level
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

module Inst_top(clk100, btnl, btnc, btnr, config_finished, vga_hsync, vga_vsync, vga_r, vga_g, vga_b, ov7670_pclk, ov7670_xclk, ov7670_vsync, ov7670_href, ov7670_data, ov7670_sioc, ov7670_siod, ov7670_pwdn, ov7670_reset);
   input        clk100;
   input        btnl;
   input        btnc;
   input        btnr;
   output       config_finished;
   
   output       vga_hsync;
   output       vga_vsync;
   output [3:0] vga_r;
   output [3:0] vga_g;
   output [3:0] vga_b;
   
   input        ov7670_pclk;
   output       ov7670_xclk;
   input        ov7670_vsync;
   input        ov7670_href;
   input [7:0]  ov7670_data;
   output       ov7670_sioc;
   inout        ov7670_siod;
   output       ov7670_pwdn;
   output       ov7670_reset;
   
   wire         clk_camera;
   wire         clk_vga;
   wire [0:0]   wren;
   wire         resend;
   wire         nBlank;
   wire         vSync;
   wire         nSync;
   
   wire [18:0]  wraddress;
   wire [11:0]  wrdata;
   
   wire [18:0]  rdaddress;
   wire [11:0]  rddata;
   wire [7:0]   red;
   wire [7:0]   green;
   wire [7:0]   blue;
   wire         activeArea;
   
   wire         rez_160x120;
   wire         rez_320x240;
   wire [1:0]   size_select;
   wire [16:0]  rd_addr;
   wire [16:0]  wr_addr;
   assign vga_r = red[7:4];
   assign vga_g = green[7:4];
   assign vga_b = blue[7:4];
   
   assign rez_160x120 = btnl;
   assign rez_320x240 = btnr;
   
   assign vga_vsync = vSync;
   
   
   assign size_select = {btnl, btnr};
   
   assign rd_addr = (size_select == 2'b00) ? rdaddress[18:2] : 
                    (size_select == 2'b01) ? rdaddress[16:0] : 
                    (size_select == 2'b10) ? rdaddress[16:0] : 
                    rdaddress[16:0];
   
   assign wr_addr = (size_select == 2'b00) ? wraddress[18:2] : 
                    (size_select == 2'b01) ? wraddress[16:0] : 
                    (size_select == 2'b10) ? wraddress[16:0] : 
                    wraddress[16:0];
   
   frame_buffer Inst_frame_buffer(.addrb(rd_addr), .clkb(clk_vga), .doutb(rddata), .clka(ov7670_pclk), .addra(wr_addr), .dina(wrdata), .wea(wren));

endmodule
